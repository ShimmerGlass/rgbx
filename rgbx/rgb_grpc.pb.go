// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rgbx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RGBizerClient is the client API for RGBizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RGBizerClient interface {
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type rGBizerClient struct {
	cc grpc.ClientConnInterface
}

func NewRGBizerClient(cc grpc.ClientConnInterface) RGBizerClient {
	return &rGBizerClient{cc}
}

func (c *rGBizerClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/rgbx.RGBizer/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rGBizerClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/rgbx.RGBizer/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RGBizerServer is the server API for RGBizer service.
// All implementations must embed UnimplementedRGBizerServer
// for forward compatibility
type RGBizerServer interface {
	Set(context.Context, *SetRequest) (*SuccessResponse, error)
	Remove(context.Context, *RemoveRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedRGBizerServer()
}

// UnimplementedRGBizerServer must be embedded to have forward compatible implementations.
type UnimplementedRGBizerServer struct {
}

func (UnimplementedRGBizerServer) Set(context.Context, *SetRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRGBizerServer) Remove(context.Context, *RemoveRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedRGBizerServer) mustEmbedUnimplementedRGBizerServer() {}

// UnsafeRGBizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RGBizerServer will
// result in compilation errors.
type UnsafeRGBizerServer interface {
	mustEmbedUnimplementedRGBizerServer()
}

func RegisterRGBizerServer(s grpc.ServiceRegistrar, srv RGBizerServer) {
	s.RegisterService(&_RGBizer_serviceDesc, srv)
}

func _RGBizer_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RGBizerServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rgbx.RGBizer/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RGBizerServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RGBizer_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RGBizerServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rgbx.RGBizer/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RGBizerServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RGBizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rgbx.RGBizer",
	HandlerType: (*RGBizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _RGBizer_Set_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _RGBizer_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rgbx/rgb.proto",
}
